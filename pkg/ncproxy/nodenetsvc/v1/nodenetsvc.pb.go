// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Microsoft/hcsshim/pkg/ncproxy/nodenetsvc/v1/nodenetsvc.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequestType int32

const (
	RequestType_Setup    RequestType = 0
	RequestType_Teardown RequestType = 1
)

var RequestType_name = map[int32]string{
	0: "Setup",
	1: "Teardown",
}

var RequestType_value = map[string]int32{
	"Setup":    0,
	"Teardown": 1,
}

func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}

func (RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{0}
}

type ConfigureNetworkingRequest struct {
	ContainerID          string      `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	RequestType          RequestType `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3,enum=nodenetsvc.v1.RequestType" json:"request_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConfigureNetworkingRequest) Reset()      { *m = ConfigureNetworkingRequest{} }
func (*ConfigureNetworkingRequest) ProtoMessage() {}
func (*ConfigureNetworkingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{0}
}
func (m *ConfigureNetworkingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureNetworkingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureNetworkingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureNetworkingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureNetworkingRequest.Merge(m, src)
}
func (m *ConfigureNetworkingRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureNetworkingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureNetworkingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureNetworkingRequest proto.InternalMessageInfo

type ConfigureNetworkingResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigureNetworkingResponse) Reset()      { *m = ConfigureNetworkingResponse{} }
func (*ConfigureNetworkingResponse) ProtoMessage() {}
func (*ConfigureNetworkingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{1}
}
func (m *ConfigureNetworkingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureNetworkingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureNetworkingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureNetworkingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureNetworkingResponse.Merge(m, src)
}
func (m *ConfigureNetworkingResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureNetworkingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureNetworkingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureNetworkingResponse proto.InternalMessageInfo

type PingNodeNetworkServiceRequest struct {
	PingRequestMessage   string   `protobuf:"bytes,1,opt,name=ping_request_message,json=pingRequestMessage,proto3" json:"ping_request_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingNodeNetworkServiceRequest) Reset()      { *m = PingNodeNetworkServiceRequest{} }
func (*PingNodeNetworkServiceRequest) ProtoMessage() {}
func (*PingNodeNetworkServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{2}
}
func (m *PingNodeNetworkServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingNodeNetworkServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingNodeNetworkServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingNodeNetworkServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingNodeNetworkServiceRequest.Merge(m, src)
}
func (m *PingNodeNetworkServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingNodeNetworkServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingNodeNetworkServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingNodeNetworkServiceRequest proto.InternalMessageInfo

type PingNodeNetworkServiceResponse struct {
	PingResponseMessage  string   `protobuf:"bytes,1,opt,name=ping_response_message,json=pingResponseMessage,proto3" json:"ping_response_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingNodeNetworkServiceResponse) Reset()      { *m = PingNodeNetworkServiceResponse{} }
func (*PingNodeNetworkServiceResponse) ProtoMessage() {}
func (*PingNodeNetworkServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{3}
}
func (m *PingNodeNetworkServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingNodeNetworkServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingNodeNetworkServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingNodeNetworkServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingNodeNetworkServiceResponse.Merge(m, src)
}
func (m *PingNodeNetworkServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingNodeNetworkServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingNodeNetworkServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingNodeNetworkServiceResponse proto.InternalMessageInfo

type ConfigureContainerNetworkingRequest struct {
	RequestType          RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=nodenetsvc.v1.RequestType" json:"request_type,omitempty"`
	ContainerID          string      `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	NetworkNamespaceID   string      `protobuf:"bytes,3,opt,name=network_namespace_id,json=networkNamespaceId,proto3" json:"network_namespace_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConfigureContainerNetworkingRequest) Reset()      { *m = ConfigureContainerNetworkingRequest{} }
func (*ConfigureContainerNetworkingRequest) ProtoMessage() {}
func (*ConfigureContainerNetworkingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{4}
}
func (m *ConfigureContainerNetworkingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureContainerNetworkingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureContainerNetworkingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureContainerNetworkingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureContainerNetworkingRequest.Merge(m, src)
}
func (m *ConfigureContainerNetworkingRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureContainerNetworkingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureContainerNetworkingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureContainerNetworkingRequest proto.InternalMessageInfo

type ConfigureContainerNetworkingResponse struct {
	Interfaces           []*ContainerNetworkInterface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ConfigureContainerNetworkingResponse) Reset()      { *m = ConfigureContainerNetworkingResponse{} }
func (*ConfigureContainerNetworkingResponse) ProtoMessage() {}
func (*ConfigureContainerNetworkingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{5}
}
func (m *ConfigureContainerNetworkingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureContainerNetworkingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureContainerNetworkingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureContainerNetworkingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureContainerNetworkingResponse.Merge(m, src)
}
func (m *ConfigureContainerNetworkingResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureContainerNetworkingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureContainerNetworkingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureContainerNetworkingResponse proto.InternalMessageInfo

type ContainerIPAddress struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength         string   `protobuf:"bytes,4,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	DefaultGateway       string   `protobuf:"bytes,5,opt,name=default_gateway,json=defaultGateway,proto3" json:"default_gateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerIPAddress) Reset()      { *m = ContainerIPAddress{} }
func (*ContainerIPAddress) ProtoMessage() {}
func (*ContainerIPAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{6}
}
func (m *ContainerIPAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerIPAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerIPAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerIPAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerIPAddress.Merge(m, src)
}
func (m *ContainerIPAddress) XXX_Size() int {
	return m.Size()
}
func (m *ContainerIPAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerIPAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerIPAddress proto.InternalMessageInfo

type ContainerNetworkInterface struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MacAddress           string                `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NetworkNamespaceID   string                `protobuf:"bytes,3,opt,name=network_namespace_id,json=networkNamespaceId,proto3" json:"network_namespace_id,omitempty"`
	Ipaddresses          []*ContainerIPAddress `protobuf:"bytes,4,rep,name=ipaddresses,proto3" json:"ipaddresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ContainerNetworkInterface) Reset()      { *m = ContainerNetworkInterface{} }
func (*ContainerNetworkInterface) ProtoMessage() {}
func (*ContainerNetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{7}
}
func (m *ContainerNetworkInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerNetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerNetworkInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerNetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerNetworkInterface.Merge(m, src)
}
func (m *ContainerNetworkInterface) XXX_Size() int {
	return m.Size()
}
func (m *ContainerNetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerNetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerNetworkInterface proto.InternalMessageInfo

type GetHostLocalIpAddressRequest struct {
	ContainerID          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostLocalIpAddressRequest) Reset()      { *m = GetHostLocalIpAddressRequest{} }
func (*GetHostLocalIpAddressRequest) ProtoMessage() {}
func (*GetHostLocalIpAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{8}
}
func (m *GetHostLocalIpAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHostLocalIpAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHostLocalIpAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHostLocalIpAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostLocalIpAddressRequest.Merge(m, src)
}
func (m *GetHostLocalIpAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHostLocalIpAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostLocalIpAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostLocalIpAddressRequest proto.InternalMessageInfo

type GetHostLocalIpAddressResponse struct {
	IpAddr               string   `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostLocalIpAddressResponse) Reset()      { *m = GetHostLocalIpAddressResponse{} }
func (*GetHostLocalIpAddressResponse) ProtoMessage() {}
func (*GetHostLocalIpAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_912a3d4a179bd2c2, []int{9}
}
func (m *GetHostLocalIpAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHostLocalIpAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHostLocalIpAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHostLocalIpAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostLocalIpAddressResponse.Merge(m, src)
}
func (m *GetHostLocalIpAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetHostLocalIpAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostLocalIpAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostLocalIpAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nodenetsvc.v1.RequestType", RequestType_name, RequestType_value)
	proto.RegisterType((*ConfigureNetworkingRequest)(nil), "nodenetsvc.v1.ConfigureNetworkingRequest")
	proto.RegisterType((*ConfigureNetworkingResponse)(nil), "nodenetsvc.v1.ConfigureNetworkingResponse")
	proto.RegisterType((*PingNodeNetworkServiceRequest)(nil), "nodenetsvc.v1.PingNodeNetworkServiceRequest")
	proto.RegisterType((*PingNodeNetworkServiceResponse)(nil), "nodenetsvc.v1.PingNodeNetworkServiceResponse")
	proto.RegisterType((*ConfigureContainerNetworkingRequest)(nil), "nodenetsvc.v1.ConfigureContainerNetworkingRequest")
	proto.RegisterType((*ConfigureContainerNetworkingResponse)(nil), "nodenetsvc.v1.ConfigureContainerNetworkingResponse")
	proto.RegisterType((*ContainerIPAddress)(nil), "nodenetsvc.v1.ContainerIPAddress")
	proto.RegisterType((*ContainerNetworkInterface)(nil), "nodenetsvc.v1.ContainerNetworkInterface")
	proto.RegisterType((*GetHostLocalIpAddressRequest)(nil), "nodenetsvc.v1.GetHostLocalIpAddressRequest")
	proto.RegisterType((*GetHostLocalIpAddressResponse)(nil), "nodenetsvc.v1.GetHostLocalIpAddressResponse")
}

func init() {
	proto.RegisterFile("github.com/Microsoft/hcsshim/pkg/ncproxy/nodenetsvc/v1/nodenetsvc.proto", fileDescriptor_912a3d4a179bd2c2)
}

var fileDescriptor_912a3d4a179bd2c2 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4b, 0x53, 0x13, 0x4d,
	0x14, 0xa5, 0xc3, 0xeb, 0xe3, 0x26, 0x3c, 0xaa, 0x79, 0x7c, 0x31, 0x42, 0xc0, 0xc1, 0xd2, 0x88,
	0x98, 0x48, 0xd8, 0xb8, 0x71, 0x21, 0x50, 0x05, 0xa9, 0x02, 0x0a, 0x07, 0x56, 0x6e, 0x52, 0xc3,
	0x4c, 0x67, 0xd2, 0x45, 0xd2, 0xdd, 0x76, 0x77, 0x02, 0xd9, 0xb9, 0x73, 0x63, 0x95, 0x7f, 0x8b,
	0xa5, 0x4b, 0x57, 0x28, 0xf9, 0x13, 0x6e, 0x2d, 0xe6, 0x11, 0xe2, 0x24, 0x93, 0x0a, 0x96, 0xbb,
	0xf4, 0xed, 0x7b, 0xcf, 0x3d, 0xe7, 0xdc, 0xe9, 0x1b, 0xd8, 0x77, 0xa9, 0xae, 0x36, 0xce, 0xf3,
	0x36, 0xaf, 0x17, 0x8e, 0xa8, 0x2d, 0xb9, 0xe2, 0x15, 0x5d, 0xa8, 0xda, 0x4a, 0x55, 0x69, 0xbd,
	0x20, 0x2e, 0xdc, 0x02, 0xb3, 0x85, 0xe4, 0x57, 0xad, 0x02, 0xe3, 0x0e, 0x61, 0x44, 0xab, 0xa6,
	0x5d, 0x68, 0x6e, 0x75, 0x9d, 0xf2, 0x42, 0x72, 0xcd, 0xf1, 0x74, 0x57, 0xa4, 0xb9, 0x65, 0x7c,
	0x45, 0x90, 0xd9, 0xe5, 0xac, 0x42, 0xdd, 0x86, 0x24, 0xc7, 0x44, 0x5f, 0x72, 0x79, 0x41, 0x99,
	0x6b, 0x92, 0x8f, 0x0d, 0xa2, 0x34, 0x2e, 0x42, 0xca, 0xe6, 0x4c, 0x5b, 0x94, 0x11, 0x59, 0xa6,
	0x4e, 0x1a, 0xad, 0xa1, 0xdc, 0xd4, 0xce, 0x6c, 0xfb, 0x66, 0x35, 0xb9, 0x1b, 0xc6, 0x4b, 0x7b,
	0x66, 0xb2, 0x93, 0x54, 0x72, 0xf0, 0x5b, 0x48, 0x49, 0xbf, 0xbc, 0xac, 0x5b, 0x82, 0xa4, 0x13,
	0x6b, 0x28, 0x37, 0x53, 0xcc, 0xe4, 0xff, 0x68, 0x9c, 0x0f, 0x3a, 0x9c, 0xb5, 0x04, 0x31, 0x93,
	0xf2, 0xfe, 0x60, 0xac, 0xc0, 0xe3, 0xbe, 0x84, 0x94, 0xe0, 0x4c, 0x11, 0xe3, 0x3d, 0xac, 0x9c,
	0x50, 0xe6, 0x1e, 0x73, 0x27, 0xbc, 0x3d, 0x25, 0xb2, 0x49, 0x6d, 0x12, 0x52, 0x7e, 0x0d, 0x0b,
	0x82, 0x32, 0xb7, 0x1c, 0x72, 0xa8, 0x13, 0xa5, 0x2c, 0x97, 0xf8, 0xd4, 0x4d, 0x2c, 0xee, 0xd5,
	0x1d, 0xf9, 0x37, 0xc6, 0x19, 0x64, 0xe3, 0x20, 0xfd, 0xa6, 0xb8, 0x08, 0x8b, 0x01, 0xa6, 0x1f,
	0x88, 0x80, 0xce, 0x8b, 0x2e, 0x86, 0x21, 0x6a, 0x1b, 0xc1, 0x7a, 0x47, 0x48, 0xc7, 0xac, 0x5e,
	0x8b, 0xa3, 0x76, 0xa1, 0x07, 0xd9, 0xd5, 0x33, 0xa1, 0xc4, 0x10, 0x13, 0x3a, 0x80, 0x05, 0xe6,
	0xf3, 0x28, 0x33, 0xab, 0x4e, 0x94, 0xb0, 0x6c, 0x72, 0x57, 0x3b, 0xea, 0xd5, 0x2e, 0xb5, 0x6f,
	0x56, 0x71, 0xc0, 0xf3, 0x38, 0xbc, 0x2e, 0xed, 0x99, 0x98, 0x45, 0x63, 0x8e, 0x21, 0xe0, 0xe9,
	0x60, 0x8d, 0x81, 0x81, 0x07, 0x00, 0x94, 0x69, 0x22, 0x2b, 0x96, 0x4d, 0x54, 0x1a, 0xad, 0x8d,
	0xe6, 0x92, 0xc5, 0x5c, 0x44, 0x62, 0xb4, 0xbe, 0x14, 0x16, 0x98, 0x5d, 0xb5, 0xc6, 0x17, 0x04,
	0xf8, 0x5e, 0xd8, 0xc9, 0x3b, 0xc7, 0x91, 0x44, 0x29, 0x9c, 0x86, 0xc9, 0x26, 0x91, 0x8a, 0x72,
	0x16, 0xcc, 0x24, 0x3c, 0xe2, 0x19, 0x48, 0x50, 0xe1, 0x4b, 0x33, 0x13, 0x54, 0xe0, 0x75, 0x98,
	0x16, 0x92, 0x54, 0xe8, 0x55, 0xb9, 0x46, 0x98, 0xab, 0xab, 0xe9, 0x31, 0xef, 0x2a, 0xe5, 0x07,
	0x0f, 0xbd, 0x18, 0x7e, 0x0e, 0xb3, 0x0e, 0xa9, 0x58, 0x8d, 0x9a, 0x2e, 0xbb, 0x96, 0x26, 0x97,
	0x56, 0x2b, 0x3d, 0xee, 0xa5, 0xcd, 0x04, 0xe1, 0x7d, 0x3f, 0x6a, 0xfc, 0x40, 0xf0, 0x28, 0x96,
	0x38, 0xc6, 0x30, 0x76, 0x67, 0x70, 0x40, 0xc9, 0xfb, 0x8d, 0x57, 0x21, 0x59, 0xb7, 0xec, 0xb2,
	0xe5, 0x13, 0xf7, 0xe7, 0x65, 0x42, 0xdd, 0xb2, 0x43, 0x29, 0xff, 0x6c, 0x3a, 0x78, 0x17, 0x92,
	0x54, 0x04, 0x8d, 0x88, 0x4a, 0x8f, 0x79, 0xb6, 0x3f, 0x89, 0xb3, 0xbd, 0x63, 0xa6, 0xd9, 0x5d,
	0x65, 0x98, 0xb0, 0xbc, 0x4f, 0xf4, 0x01, 0x57, 0xfa, 0x90, 0xdb, 0x56, 0xad, 0x24, 0xc2, 0xac,
	0xbf, 0x5f, 0x11, 0xc6, 0x1b, 0x58, 0x89, 0xc1, 0x0c, 0xbe, 0x97, 0xff, 0x61, 0x92, 0x0a, 0xcf,
	0xa3, 0xc0, 0xbb, 0x09, 0xea, 0xe5, 0x6c, 0x3c, 0x83, 0x64, 0xd7, 0x53, 0xc0, 0x53, 0x30, 0x7e,
	0x4a, 0x74, 0x43, 0xcc, 0x8d, 0xe0, 0x14, 0xfc, 0x77, 0x46, 0x2c, 0xe9, 0xf0, 0x4b, 0x36, 0x87,
	0x8a, 0xbf, 0x46, 0x01, 0xf7, 0x3e, 0x68, 0x5c, 0x83, 0xf9, 0x3e, 0xcb, 0x05, 0xbf, 0xe8, 0xf5,
	0x24, 0x66, 0x23, 0x66, 0x36, 0x86, 0x49, 0x0d, 0x54, 0x7c, 0x46, 0xb0, 0x3c, 0xe8, 0x79, 0xe0,
	0x62, 0x1c, 0x58, 0xfc, 0xbe, 0xc8, 0x6c, 0x3f, 0xa8, 0x26, 0x60, 0xd2, 0x80, 0xa5, 0xfe, 0x2b,
	0x0e, 0x6f, 0x46, 0xe0, 0x06, 0x2e, 0xd7, 0xcc, 0xab, 0x21, 0xb3, 0x83, 0xb6, 0x12, 0x16, 0xfb,
	0xce, 0x19, 0xbf, 0x8c, 0xe0, 0x0c, 0xfa, 0xc2, 0x32, 0x9b, 0xc3, 0x25, 0xfb, 0x3d, 0x77, 0x96,
	0xaf, 0x6f, 0xb3, 0x23, 0xdf, 0x6f, 0xb3, 0x23, 0x9f, 0xda, 0x59, 0x74, 0xdd, 0xce, 0xa2, 0x6f,
	0xed, 0x2c, 0xfa, 0xd9, 0xce, 0xa2, 0x0f, 0x89, 0xe6, 0xd6, 0xf9, 0x84, 0xf7, 0x2f, 0xb8, 0xfd,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0x96, 0xb0, 0x6a, 0x8e, 0x50, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeNetworkServiceClient is the client API for NodeNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeNetworkServiceClient interface {
	ConfigureNetworking(ctx context.Context, in *ConfigureNetworkingRequest, opts ...grpc.CallOption) (*ConfigureNetworkingResponse, error)
	ConfigureContainerNetworking(ctx context.Context, in *ConfigureContainerNetworkingRequest, opts ...grpc.CallOption) (*ConfigureContainerNetworkingResponse, error)
	PingNodeNetworkService(ctx context.Context, in *PingNodeNetworkServiceRequest, opts ...grpc.CallOption) (*PingNodeNetworkServiceResponse, error)
	GetHostLocalIpAddress(ctx context.Context, in *GetHostLocalIpAddressRequest, opts ...grpc.CallOption) (*GetHostLocalIpAddressResponse, error)
}

type nodeNetworkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeNetworkServiceClient(cc *grpc.ClientConn) NodeNetworkServiceClient {
	return &nodeNetworkServiceClient{cc}
}

func (c *nodeNetworkServiceClient) ConfigureNetworking(ctx context.Context, in *ConfigureNetworkingRequest, opts ...grpc.CallOption) (*ConfigureNetworkingResponse, error) {
	out := new(ConfigureNetworkingResponse)
	err := c.cc.Invoke(ctx, "/nodenetsvc.v1.NodeNetworkService/ConfigureNetworking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkServiceClient) ConfigureContainerNetworking(ctx context.Context, in *ConfigureContainerNetworkingRequest, opts ...grpc.CallOption) (*ConfigureContainerNetworkingResponse, error) {
	out := new(ConfigureContainerNetworkingResponse)
	err := c.cc.Invoke(ctx, "/nodenetsvc.v1.NodeNetworkService/ConfigureContainerNetworking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkServiceClient) PingNodeNetworkService(ctx context.Context, in *PingNodeNetworkServiceRequest, opts ...grpc.CallOption) (*PingNodeNetworkServiceResponse, error) {
	out := new(PingNodeNetworkServiceResponse)
	err := c.cc.Invoke(ctx, "/nodenetsvc.v1.NodeNetworkService/PingNodeNetworkService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkServiceClient) GetHostLocalIpAddress(ctx context.Context, in *GetHostLocalIpAddressRequest, opts ...grpc.CallOption) (*GetHostLocalIpAddressResponse, error) {
	out := new(GetHostLocalIpAddressResponse)
	err := c.cc.Invoke(ctx, "/nodenetsvc.v1.NodeNetworkService/GetHostLocalIpAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeNetworkServiceServer is the server API for NodeNetworkService service.
type NodeNetworkServiceServer interface {
	ConfigureNetworking(context.Context, *ConfigureNetworkingRequest) (*ConfigureNetworkingResponse, error)
	ConfigureContainerNetworking(context.Context, *ConfigureContainerNetworkingRequest) (*ConfigureContainerNetworkingResponse, error)
	PingNodeNetworkService(context.Context, *PingNodeNetworkServiceRequest) (*PingNodeNetworkServiceResponse, error)
	GetHostLocalIpAddress(context.Context, *GetHostLocalIpAddressRequest) (*GetHostLocalIpAddressResponse, error)
}

// UnimplementedNodeNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeNetworkServiceServer struct {
}

func (*UnimplementedNodeNetworkServiceServer) ConfigureNetworking(ctx context.Context, req *ConfigureNetworkingRequest) (*ConfigureNetworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureNetworking not implemented")
}
func (*UnimplementedNodeNetworkServiceServer) ConfigureContainerNetworking(ctx context.Context, req *ConfigureContainerNetworkingRequest) (*ConfigureContainerNetworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureContainerNetworking not implemented")
}
func (*UnimplementedNodeNetworkServiceServer) PingNodeNetworkService(ctx context.Context, req *PingNodeNetworkServiceRequest) (*PingNodeNetworkServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingNodeNetworkService not implemented")
}
func (*UnimplementedNodeNetworkServiceServer) GetHostLocalIpAddress(ctx context.Context, req *GetHostLocalIpAddressRequest) (*GetHostLocalIpAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostLocalIpAddress not implemented")
}

func RegisterNodeNetworkServiceServer(s *grpc.Server, srv NodeNetworkServiceServer) {
	s.RegisterService(&_NodeNetworkService_serviceDesc, srv)
}

func _NodeNetworkService_ConfigureNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureNetworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).ConfigureNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodenetsvc.v1.NodeNetworkService/ConfigureNetworking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).ConfigureNetworking(ctx, req.(*ConfigureNetworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetworkService_ConfigureContainerNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureContainerNetworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).ConfigureContainerNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodenetsvc.v1.NodeNetworkService/ConfigureContainerNetworking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).ConfigureContainerNetworking(ctx, req.(*ConfigureContainerNetworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetworkService_PingNodeNetworkService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingNodeNetworkServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).PingNodeNetworkService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodenetsvc.v1.NodeNetworkService/PingNodeNetworkService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).PingNodeNetworkService(ctx, req.(*PingNodeNetworkServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetworkService_GetHostLocalIpAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostLocalIpAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).GetHostLocalIpAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodenetsvc.v1.NodeNetworkService/GetHostLocalIpAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).GetHostLocalIpAddress(ctx, req.(*GetHostLocalIpAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeNetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodenetsvc.v1.NodeNetworkService",
	HandlerType: (*NodeNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureNetworking",
			Handler:    _NodeNetworkService_ConfigureNetworking_Handler,
		},
		{
			MethodName: "ConfigureContainerNetworking",
			Handler:    _NodeNetworkService_ConfigureContainerNetworking_Handler,
		},
		{
			MethodName: "PingNodeNetworkService",
			Handler:    _NodeNetworkService_PingNodeNetworkService_Handler,
		},
		{
			MethodName: "GetHostLocalIpAddress",
			Handler:    _NodeNetworkService_GetHostLocalIpAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Microsoft/hcsshim/pkg/ncproxy/nodenetsvc/v1/nodenetsvc.proto",
}

func (m *ConfigureNetworkingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureNetworkingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureNetworkingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestType != 0 {
		i = encodeVarintNodenetsvc(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContainerID) > 0 {
		i -= len(m.ContainerID)
		copy(dAtA[i:], m.ContainerID)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.ContainerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureNetworkingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureNetworkingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureNetworkingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PingNodeNetworkServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingNodeNetworkServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingNodeNetworkServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PingRequestMessage) > 0 {
		i -= len(m.PingRequestMessage)
		copy(dAtA[i:], m.PingRequestMessage)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.PingRequestMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingNodeNetworkServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingNodeNetworkServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingNodeNetworkServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PingResponseMessage) > 0 {
		i -= len(m.PingResponseMessage)
		copy(dAtA[i:], m.PingResponseMessage)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.PingResponseMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureContainerNetworkingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureContainerNetworkingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureContainerNetworkingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NetworkNamespaceID) > 0 {
		i -= len(m.NetworkNamespaceID)
		copy(dAtA[i:], m.NetworkNamespaceID)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.NetworkNamespaceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContainerID) > 0 {
		i -= len(m.ContainerID)
		copy(dAtA[i:], m.ContainerID)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.ContainerID)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestType != 0 {
		i = encodeVarintNodenetsvc(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureContainerNetworkingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureContainerNetworkingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureContainerNetworkingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodenetsvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContainerIPAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerIPAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerIPAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DefaultGateway) > 0 {
		i -= len(m.DefaultGateway)
		copy(dAtA[i:], m.DefaultGateway)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.DefaultGateway)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PrefixLength) > 0 {
		i -= len(m.PrefixLength)
		copy(dAtA[i:], m.PrefixLength)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.PrefixLength)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerNetworkInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerNetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerNetworkInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ipaddresses) > 0 {
		for iNdEx := len(m.Ipaddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ipaddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodenetsvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NetworkNamespaceID) > 0 {
		i -= len(m.NetworkNamespaceID)
		copy(dAtA[i:], m.NetworkNamespaceID)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.NetworkNamespaceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MacAddress) > 0 {
		i -= len(m.MacAddress)
		copy(dAtA[i:], m.MacAddress)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.MacAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetHostLocalIpAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHostLocalIpAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHostLocalIpAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContainerID) > 0 {
		i -= len(m.ContainerID)
		copy(dAtA[i:], m.ContainerID)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.ContainerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetHostLocalIpAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHostLocalIpAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHostLocalIpAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IpAddr) > 0 {
		i -= len(m.IpAddr)
		copy(dAtA[i:], m.IpAddr)
		i = encodeVarintNodenetsvc(dAtA, i, uint64(len(m.IpAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNodenetsvc(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodenetsvc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConfigureNetworkingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerID)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	if m.RequestType != 0 {
		n += 1 + sovNodenetsvc(uint64(m.RequestType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigureNetworkingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingNodeNetworkServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PingRequestMessage)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingNodeNetworkServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PingResponseMessage)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigureContainerNetworkingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovNodenetsvc(uint64(m.RequestType))
	}
	l = len(m.ContainerID)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	l = len(m.NetworkNamespaceID)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigureContainerNetworkingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovNodenetsvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerIPAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	l = len(m.PrefixLength)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	l = len(m.DefaultGateway)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerNetworkInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	l = len(m.NetworkNamespaceID)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	if len(m.Ipaddresses) > 0 {
		for _, e := range m.Ipaddresses {
			l = e.Size()
			n += 1 + l + sovNodenetsvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHostLocalIpAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerID)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHostLocalIpAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovNodenetsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNodenetsvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodenetsvc(x uint64) (n int) {
	return sovNodenetsvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConfigureNetworkingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigureNetworkingRequest{`,
		`ContainerID:` + fmt.Sprintf("%v", this.ContainerID) + `,`,
		`RequestType:` + fmt.Sprintf("%v", this.RequestType) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigureNetworkingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigureNetworkingResponse{`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingNodeNetworkServiceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingNodeNetworkServiceRequest{`,
		`PingRequestMessage:` + fmt.Sprintf("%v", this.PingRequestMessage) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingNodeNetworkServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingNodeNetworkServiceResponse{`,
		`PingResponseMessage:` + fmt.Sprintf("%v", this.PingResponseMessage) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigureContainerNetworkingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigureContainerNetworkingRequest{`,
		`RequestType:` + fmt.Sprintf("%v", this.RequestType) + `,`,
		`ContainerID:` + fmt.Sprintf("%v", this.ContainerID) + `,`,
		`NetworkNamespaceID:` + fmt.Sprintf("%v", this.NetworkNamespaceID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigureContainerNetworkingResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaces := "[]*ContainerNetworkInterface{"
	for _, f := range this.Interfaces {
		repeatedStringForInterfaces += strings.Replace(f.String(), "ContainerNetworkInterface", "ContainerNetworkInterface", 1) + ","
	}
	repeatedStringForInterfaces += "}"
	s := strings.Join([]string{`&ConfigureContainerNetworkingResponse{`,
		`Interfaces:` + repeatedStringForInterfaces + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerIPAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerIPAddress{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`PrefixLength:` + fmt.Sprintf("%v", this.PrefixLength) + `,`,
		`DefaultGateway:` + fmt.Sprintf("%v", this.DefaultGateway) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerNetworkInterface) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIpaddresses := "[]*ContainerIPAddress{"
	for _, f := range this.Ipaddresses {
		repeatedStringForIpaddresses += strings.Replace(f.String(), "ContainerIPAddress", "ContainerIPAddress", 1) + ","
	}
	repeatedStringForIpaddresses += "}"
	s := strings.Join([]string{`&ContainerNetworkInterface{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MacAddress:` + fmt.Sprintf("%v", this.MacAddress) + `,`,
		`NetworkNamespaceID:` + fmt.Sprintf("%v", this.NetworkNamespaceID) + `,`,
		`Ipaddresses:` + repeatedStringForIpaddresses + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHostLocalIpAddressRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHostLocalIpAddressRequest{`,
		`ContainerID:` + fmt.Sprintf("%v", this.ContainerID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHostLocalIpAddressResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHostLocalIpAddressResponse{`,
		`IpAddr:` + fmt.Sprintf("%v", this.IpAddr) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNodenetsvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConfigureNetworkingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureNetworkingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureNetworkingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= RequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureNetworkingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureNetworkingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureNetworkingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingNodeNetworkServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingNodeNetworkServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingNodeNetworkServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingRequestMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PingRequestMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingNodeNetworkServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingNodeNetworkServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingNodeNetworkServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingResponseMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PingResponseMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureContainerNetworkingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureContainerNetworkingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureContainerNetworkingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= RequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkNamespaceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkNamespaceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureContainerNetworkingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureContainerNetworkingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureContainerNetworkingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &ContainerNetworkInterface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerIPAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerIPAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerIPAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrefixLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerNetworkInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerNetworkInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerNetworkInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkNamespaceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkNamespaceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipaddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipaddresses = append(m.Ipaddresses, &ContainerIPAddress{})
			if err := m.Ipaddresses[len(m.Ipaddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHostLocalIpAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHostLocalIpAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHostLocalIpAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHostLocalIpAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHostLocalIpAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHostLocalIpAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodenetsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodenetsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodenetsvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodenetsvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodenetsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodenetsvc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodenetsvc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodenetsvc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodenetsvc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodenetsvc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodenetsvc = fmt.Errorf("proto: unexpected end of group")
)
